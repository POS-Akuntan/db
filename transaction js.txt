<script type="module">
  import Swal from "https://cdn.jsdelivr.net/npm/sweetalert2@11/src/sweetalert2.js";
  import { addCSS } from "https://cdn.jsdelivr.net/gh/jscroot/lib@0.0.9/element.js";

  addCSS("https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.css");

  document.addEventListener("DOMContentLoaded", () => {
    const cart = JSON.parse(localStorage.getItem("selectedProducts")) || [];
    const cartElement = document.getElementById("cart");
    const cartTotalElement = document.getElementById("cartTotal");

    // Variabel untuk pagination
    const productsPerPage = 8; // 4 kolom Ã— 2 baris
    let currentPage = 1;
    let allProducts = [];

    // Fungsi untuk menyimpan token dari URL ke localStorage
    function saveTokenFromURL() {
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get("token");
      if (token) {
        localStorage.setItem("token", token);
        console.log("Token berhasil disimpan ke localStorage:", token);
      }
    }

    // Fungsi untuk validasi login
    function validateLogin() {
      const token = localStorage.getItem("token");
      if (!token) {
        Swal.fire({
          title: "Akses Ditolak",
          text: "Silahkan login terlebih dahulu",
          icon: "warning",
          confirmButtonText: "Login",
        }).then(() => {
          window.location.href = "https://pos-akuntan.github.io/";
        });
      }
    }

    // Fetch data produk dari server
    function fetchProducts() {
      fetch("https://pos-ochre.vercel.app/api/products")
        .then((response) => response.json())
        .then((data) => {
          allProducts = data;
          renderProducts();
        })
        .catch((error) => console.error("Error fetching products:", error));
    }

    // Fungsi untuk render produk berdasarkan halaman saat ini
    function renderProducts() {
      const startIndex = (currentPage - 1) * productsPerPage;
      const endIndex = startIndex + productsPerPage;
      const productsToRender = allProducts.slice(startIndex, endIndex);

      const productGrid = document.getElementById("productGrid");
      productGrid.innerHTML = ""; // Bersihkan grid sebelumnya

      productsToRender.forEach((product) => {
        const productItem = document.createElement("div");
        productItem.classList.add("product-item");
        productItem.innerHTML = `
          <img src="${product.picture_url}" alt="${product.name}">
          <h6>${product.name}</h6>
          <p>${product.category_name}</p>
          <p>Rp ${product.price}</p>
          <p>Stock: <span id="stock-${product.id_products}">${product.stock}</span></p>
        `;
        productItem.addEventListener("click", () => addToCart(product));
        productGrid.appendChild(productItem);
      });

      updatePaginationInfo();
    }

    // Fungsi untuk memperbarui informasi pagination
    function updatePaginationInfo() {
      const totalPages = Math.ceil(allProducts.length / productsPerPage);
      document.getElementById("paginationInfo").innerText = `Page ${currentPage} of ${totalPages}`;
      document.getElementById("prevPage").disabled = currentPage === 1;
      document.getElementById("nextPage").disabled = currentPage === totalPages;
    }

    // Fungsi untuk navigasi ke halaman sebelumnya
    document.getElementById("prevPage").addEventListener("click", () => {
      if (currentPage > 1) {
        currentPage--;
        renderProducts();
      }
    });

    // Fungsi untuk navigasi ke halaman berikutnya
    document.getElementById("nextPage").addEventListener("click", () => {
      const totalPages = Math.ceil(allProducts.length / productsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        renderProducts();
      }
    });

    // Fungsi untuk menambahkan produk ke keranjang
    function addToCart(product) {
      const stockElement = document.getElementById(`stock-${product.id_products}`);
      let stock = parseInt(stockElement.innerText);

      if (stock > 0) {
        const existingProduct = cart.find((item) => item.id_products === product.id_products);
        if (existingProduct) {
          existingProduct.quantity++;
        } else {
          cart.push({
            id_products: product.id_products,
            name: product.name,
            price: product.price,
            quantity: 1,
            category: product.category,
            description: product.description,
          });
        }
        stockElement.innerText = stock - 1;
        localStorage.setItem("selectedProducts", JSON.stringify(cart));
        updateCart();
      } else {
        Swal.fire({
          title: "Stok Habis",
          text: "Tidak dapat menambahkan produk ini",
          icon: "error",
        });
      }
    }

    // Fungsi untuk memperbarui tampilan keranjang
    function updateCart() {
      cartElement.innerHTML = "";
      let total = 0;
      cart.forEach((item) => {
        total += item.price * item.quantity;
        const cartItem = document.createElement("div");
        cartItem.classList.add("cart-item");
        cartItem.innerHTML = `
          <span>${item.name} (${item.quantity})</span>
          <span>Rp ${item.price * item.quantity}</span>
        `;
        cartElement.appendChild(cartItem);
      });
      cartTotalElement.textContent = `Total: Rp ${total}`;
    }

    // Handle Checkout Button
    const checkoutButton = document.getElementById("checkoutButton");
    checkoutButton.addEventListener("click", () => {
      const paymentModal = new bootstrap.Modal(document.getElementById("paymentModal"));
      paymentModal.show();
    });

    // Handle Pay Button in Payment Modal
    document.getElementById("payButton").addEventListener("click", async () => {
      const paymentMethod = "cash";
      const selectedProducts = JSON.parse(localStorage.getItem("selectedProducts")) || [];
    
      // Ambil input data customer
      const customerName = document.getElementById("customerName").value;
      const customerPhone = document.getElementById("customerPhone").value;
      const tableNumber = document.getElementById("tableNumber").value;
    
      // Validasi input data customer
      if (!customerName || !customerPhone || !tableNumber) {
        Swal.fire("Error", "Please fill out all customer details.", "error");
        return;
      }
    
      // Validasi jika tidak ada produk yang dipilih
      if (selectedProducts.length === 0) {
        Swal.fire("Error", "No products selected. Please add products to the cart.", "error");
        return;
      }
    
      const totalAmount = selectedProducts.reduce(
        (total, product) => total + parseFloat(product.price) * product.quantity,
        0
      );
    
      const transactionData = {
        transaction_date: new Date().toISOString(),
        payment_method: paymentMethod,
        total_amount: totalAmount,
        customer_name: customerName, // Tambahkan nama customer
        customer_phone: customerPhone, // Tambahkan nomor telepon customer
        table_number: tableNumber, // Tambahkan nomor meja
      };
    
      const token = localStorage.getItem("token");
      if (!token) {
        Swal.fire("Error", "Please log in to complete the transaction.", "error");
        return;
      }
    
      try {
        const response = await fetch("https://pos-ochre.vercel.app/api/transactions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(transactionData),
        });
    
        if (!response.ok) {
          const errorResponse = await response.json();
          Swal.fire("Error", errorResponse.message || "There was an error processing the transaction.", "error");
          return;
        }
    
        const transaction = await response.json();
    
        for (const product of selectedProducts) {
          const transactionItemData = {
            id_transactions: transaction.id_transactions,
            id_products: product.id_products,
            quantity: product.quantity,
            unit_price: product.price,
          };
    
          const itemResponse = await fetch("https://pos-ochre.vercel.app/api/transaction-items", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify(transactionItemData),
          });
    
          if (!itemResponse.ok) {
            const itemError = await itemResponse.json();
            Swal.fire("Error", itemError.message || "There was an error saving the transaction item.", "error");
            return;
          }
        }
    
        localStorage.removeItem("selectedProducts");
        Swal.fire("Success", "Payment successful!", "success").then(() => {
          window.location.href = "transaction.html";
        });
      } catch (error) {
        console.error("Error Processing Transaction:", error);
        Swal.fire("Error", "There was an error processing the transaction.", "error");
      }
    });
    

    saveTokenFromURL();
    validateLogin();
    fetchProducts();
    updateCart();
  });
</script>